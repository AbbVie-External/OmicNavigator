% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add.R
\name{addPlots}
\alias{addPlots}
\title{Add custom plotting functions}
\usage{
addPlots(study, plots)
}
\arguments{
\item{study}{An OmicAnalyzer study created with \code{\link{createStudy}}}

\item{plots}{Custom plotting functions for the study. The input object is a
named list of lists (one per model). The names of the sublists should
correspond to functions defined in the current R session. Each sublist must
define a \code{displayName} to control how the plot will be named in the
app. Optionally, if the plottting function requires external packages,
these can be defined in the element \code{packages}. To share plots across
multiple models, use the model ID "default".}
}
\description{
Include custom plots that the app will display when a feature is selected by
the user.
}
\details{
All custom plotting functions are required to have the same function
signature. The first argument is always \code{x}, which will be a data frame
that combines the sample metadata with a column containing the assay
measurements for a specific featureID. That column will always be named
\code{feature}. The second argument, \code{featureID}, is the unique ID of
the feature. This is for labeling the plot.

Note that any ggplot2 plots will require extra care. This is because the
plotting code will be inserted into a study package, and thus must follow the
\href{https://ggplot2.tidyverse.org/articles/ggplot2-in-packages.html#using-aes-and-vars-in-a-package-function-1}{best
practices for using ggplot2 within packages}. Specifically, when you refer to
columns of the data frame, e.g. \code{aes(x = group)}, you need to prefix it
with \code{.data$}, so that it becomes \code{aes(x = .data$group)}.
Fortunately this latter code will also run fine as you interactively develop
the function.
}
